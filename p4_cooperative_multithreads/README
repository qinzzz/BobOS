Due:
    test 2/18/2020 @ 11:59pm
    code 2/19/2020 @ 11:59pm

Assignment:
~~~~~~~~~~~

    - Learn about C++ templates and lambdas (closures)
    - Implement cooperative multi-threading
    - contribute a test case
    - read about the following x86 instructions:
         hlt
         pause
         mwait:A hint that allows the processor to stop instruction execution and enter an implementation-dependent 
            optimized state until occurrence of a class of events.

Creating a thread:
~~~~~~~~~~~~~~~~~~

    template <typename T>
    void thread(T t) {   // T is a callable object
       ...
    }

Threads share global memory by they have private stacks (8KB each)

Examples:

- using a C++ lambda

   thread([] {
       /* This code runs concurrently with the caller of "thread" */
       Debug::printf("hello from thread\n");
    });

- using a function

void body() {
    Debug::print("this is a thread\n");
}

void some_other_function() {
    ...
    thread(body);  // create a thread that runs the "body" function
    ...
}


Scheduling:
~~~~~~~~~~~

- Can't make any assumptions about exact execution order
- All threads must get a chance to run (no thread starvation)
- All cores must participate in running ready threads
- No preemption, threads yield to each other using the "yield" call


Yielding the CPU:
~~~~~~~~~~~~~~~~~

    void yield();  // let other threads run

Stopping a thread:
~~~~~~~~~~~~~~~~~~

    void stop();   // never run the calling thread again

Initializing the threading module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our loader is too primitive and doesn't run global constructors. We compensate
for that by having "init" call threadsInit on core#0, giving it a chance to
initialize any global variables it might need.

To run tests:
~~~~~~~~~~~~~

    make clean test

To make the output less noisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    make -s clean test

To run one test
~~~~~~~~~~~~~~~

    make -s t0.test

To run by hand
~~~~~~~~~~~~~~

    ./run_qemu t0

To run with gdb
~~~~~~~~~~~~~~~

    ./debug_qemu t0

       Then follow the instructions on the screen

Generated files
~~~~~~~~~~~~~~~

For each test, a set of files will be generated:

    <test>.raw          the raw output from running QEMU
    <test>.out          the lines that start with *** from the raw output
    <test>.diff         the difference between <test>.out and <test>.ok
    <test>.result       pass or fail


Files you can change
~~~~~~~~~~~~~~~~~~~~

kernel/thread.cc

Files with useful functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

kernel/atomic.h
kernel/queue.h
kernel/future.h

